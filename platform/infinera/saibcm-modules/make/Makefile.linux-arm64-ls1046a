# Uncomment to add private CFLAGS
DEBUG_CFLAGS=-Wdeclaration-after-statement

# Define if longs are 64 bits on your compiler;
# this is typically true ONLY for 64-bit processors.
CFGFLAGS += -DLONGS_ARE_64BITS

#
# Define if pointers are 64 bits on your compiler;
# this is typically true ONLY for 64-bit processors.
# NOTE: This support works ONLY under conditions where the
# upper 32 bits for ALL pointers are ZERO.
CFGFLAGS += -DPTRS_ARE_64BITS

CFGFLAGS += -DPHYS_ADDRS_ARE_64BITS

# Options for ATP performance optmization.
# If this is defined, callback function can be used to free packet buffer.
# This will result in better ATP performance.
#CFGFLAGS += -DBCM_RPC_ATP_TX_CALLBACK
CFGFLAGS += -D_SIMPLE_MEMORY_ALLOCATION_=0 -DUSE_LINUX_BDE_MMAP=1
#CFGFLAGS += -D__DUNE_LINUX_BCM_CPU_PCIE__
CFGFLAGS += -DSAL_BDE_32BIT_USER_64BIT_KERNEL
CFGFLAGS += -DBCM_EASY_RELOAD_WB_COMPAT_SUPPORT

# Options for feature list (INCLUDE_XXX)
# If FEATURE_LIST is defined, it is a list of features to include.
# See Make.config for the default feature list.
#
# Avaliable features:
#
#     BCMX
#     BCMX_DIAG
#     CHASSIS
#     CUSTOMER
#     DRIVERS
#     EDITLINE
#     I2C
#     L3
#     MEM_SCAN
#     ATPTRANS_SOCKET
#     TELNET
#     TEST
#     ACL
#     RCPU
#     KNET - Linux user mode kernel network support
#     BCM_SAL_PROFILE - make available an API to track SAL usage.
#     CINT - Include the C Interpreter in the diagnostic shell. 
#            Please note this cannot be used in Linux kernel mode. 
#     C_UNIT - Include the C unit testing framework.  If CINT is also included
#              then hooks will be provided for use from it.
#     PHY_SYM_DBG - PHY GUI MDIO read/write support. Socket interface
#                   to PHY GUI for Symbolic debugging.
#     APIMODE - call SDK API functions from shell, requires CINT
#     DUNE_UI - dune legacy user interface. For debug only. Tested
#               on linux-user-gto-2.6 only.
#     KBP   -   include nlm2(11K)/nlm3(12K) KBP support
#     BHH   -   Include Support for BHH Application (MPLS-TP OAM based on Y.1731) 
#               using BTE on select devices.
#     FLOWTRACKER   -   Include Support for Flowtracker Application using BTE on 
#                       select devices.
#     GDPLL   -   Include Support for GDPLL on select devices.
#     AVS   - Include AVS support
#     MPLS_LM_DM - Include Support for MPLS LM/DM Application (based on RFC 6374)
#                  using BTE on select devices.
#     ETH_LM_DM - Include Support for Ethernet LM/DM Application 
#                   (ETH-OAM based on Y.1731) using BTE on select devices.
#     UC_ULINK - Include Support for maintaining port link status on BTE 
#     OAM_FAULTS_MULTI_GET - Include support for faults_get for multiple endpoints
#                            through single API
#     CCM   - Include support for CCM Application using BTE on select devices
#     TCB   - Include support for Transient Capture Buffer Application 
#     PSTATS - Include support for Packetized Statistic Application 
#     IFA    - Include Support for In-band flow analyzer Embedded Application
#     TELEMETRY - Includes Support for Telemetry embedded applications
#     INT    - Include Support for INT Turnaround Embedded Application
#     SUM    - Include Support for Switch Utilization Monitor Embedded Application
#FEATURE_LIST=ATPTRANS_SOCKET BCMX_DIAG L3 I2C BCMX MEM_SCAN EDITLINE \
#    CUSTOMER TELNET DRIVERS CHASSIS TEST ACL RCPU BCM_SAL_PROFILE CINT \
#    PTP CES FCMAP BOARD KNET REGEX MACSEC APIMODE BFD KBP AVS TCB PSTATS

FEATURE_LIST := CINT L3 I2C BCMX BCMX_DIAG MEM_SCAN EDITLINE BCM_SAL_PROFILE CUSTOMER TEST CHASSIS MSTP RCPU ATPTRANS_SOCKET DUNE_UI INTR APIMODE PTP

###############################################################
#              KBP supported devices
#
#Enable this for 11K device support
#KBP_DEVICE = KBP_11K
#
#Enable this for 12K device support
#KBP_DEVICE = KBP_ALG
#
###############################################################

################################################################
#
# Selective Device Support (Switches and PHYs)
#
################################################################

# Multiple Chip Support
#
# By default, the driver supports all Strata switch and fabric chips
# included in this software release.  It checks device IDs at runtime
# to run the correct driver modules.
#
# To save space, the driver can be compiled to support just a subset of
# the chips.  To do this, uncomment the line for BCM_PTL_SPT (partial
# support) and uncomment one line for each chip to support.
#
# Note that there are a lot more chips than drivers.
# For example, the BCM5615 driver is also used for BCM5625 and BCM5645.
#

BCM_PTL_SPT = 1

BCM_56160_A0 = 1

BCM_53570_A0 = 1
BCM_53570_B0 = 1

#BCM_53400_A0 = 1
#BCM_88650_A0 = 1
#BCM_88660_A0 = 1
#BCM_88675_A0 = 1
#BCM_88680_A0 = 1
#BCM_88650_B0 = 1
#BCM_88950_A0 = 1
#BCM_88770_A0 = 1
#BCM_88470_A0 = 1

#BCM_5675_A0 = 1
#BCM_56102_A0 = 1
#BCM_56112_A0 = 1
#BCM_56304_B0 = 1
#BCM_56314_A0 = 1
#BCM_56504_A0 = 1
#BCM_56504_B0 = 1
#BCM_56514_A0 = 1
#BCM_56624_A0 = 1
#BCM_56624_B0 = 1
#BCM_56680_A0 = 1
#BCM_56680_B0 = 1
#BCM_56580_A0 = 1
#BCM_56700_A0 = 1
#BCM_56800_A0 = 1
#BCM_56218_A0 = 1
#BCM_56224_A0 = 1
#BCM_56224_B0 = 1
#BCM_56725_A0 = 1
#BCM_56820_A0 = 1
#BCM_53314_A0 = 1
#BCM_53324_A0 = 1
#BCM_56634_A0 = 1
#BCM_56634_B0 = 1
#BCM_56524_A0 = 1
#BCM_56524_B0 = 1
#BCM_56685_A0 = 1
#BCM_56685_B0 = 1
#BCM_56334_A0 = 1
#BCM_56334_B0 = 1
#BCM_56840_A0 = 1
#BCM_56840_B0 = 1
#BCM_56850_A0 = 1
#BCM_56142_A0 = 1
#BCM_56150_A0 = 1
#BCM_56836_A0 = 1
#BCM_56640_A0 = 1
#BCM_56440_A0 = 1
#BCM_56440_B0 = 1
#BCM_56450_A0 = 1
#BCM_56150_A0 = 1
#BCM_53400_A0 = 1
#BCM_56160_A0 = 1
#BCM_53570_A0 = 1
#BCM_53570_B0 = 1
#BCM_53540_A0 = 1
#BCM_56960_A0 = 1
#BCM_56965_A0 = 1
#BCM_56980_A0 = 1
#BCM_56860_A0 = 1
#BCM_56560_A0 = 1
#BCM_56260_A0 = 1
#BCM_56260_B0 = 1
#BCM_56870_A0 = 1
#BCM_56370_A0 = 1
#BCM_56770_A0 = 1
#BCM_56560_B0 = 1
#BCM_56670_A0 = 1
#BCM_56670_B0 = 1
#BCM_56270_A0 = 1
#BCM_56670_B0 = 1
#BCM_56970_A0 = 1

# Options for multiple PHY support
# If BCM_PHY_LIST is defined, it is a list of PHYs to include.
# The default is to include all of them.
# If none of them should be included specify BCM_PHY_LIST=EMPTY
#BCM_PHY_LIST=522X 54XX 5464 5421S 5482 54616 54680 54680E 52681E 54880E 54682 54684 54640 54640E 54880 SERDES SIMUL 8703 8705 8706 8072 8040 8481 8750 8729 84740 84756 84328 8806X EMPTY

# Support for phy simulation
#CFGFLAGS += -DINCLUDE_PHY_SIMUL
#CFGFLAGS += -DSIM_ALL_PHYS        # All phys use simulation driver
#CFGFLAGS += -DSIM_CMIC_LINK_STAT  # Get link status from CMIC register

# Support for BOARD library
# if BOARD_LIST is defined, it is a list of Board drivers to include.
# The default is to include all board drivers appropriate for the devices
# included in the build. If none of them should be included specify
# BOARD_LIST=EMPTY.
#BOARD_LIST=GENERIC

# Support for event logging
#CFGFLAGS += -DINCLUDE_SHARED_EVLOG

# Support for BCM API port translation
#CFGFLAGS += -DINCLUDE_BCM_API_XLATE_PORT

# Support for callback error checks and abort in traverse api's
#CFGFLAGS += -DBCM_CB_ABORT_ON_ERR
################################################################
#
# Misc Options
#
################################################################
#CFGFLAGS += -DSOC_MEM_L3_DEFIP_WAR

# Compile out Register/Table descriptive strings to generate a
# compact image
#CFGFLAGS +=-DSOC_NO_NAMES
#CFGFLAGS +=-DSOC_NO_ALIAS
#CFGFLAGS +=-DSOC_NO_DESC

# Reload/WarmBoot Support
#
CFGFLAGS += -DBCM_WARM_BOOT_SUPPORT
#
# Need this for validation using SOC scripts; Will move to tcl 
# someday
CFGFLAGS += -DBCM_WARM_BOOT_SUPPORT_SW_DUMP
#
# Adds a CRC check on scache buffer: Calculate when saving,
# and verify when loading.
# When doing ISSU, both source and destination versions should either have
# this flag enabled or disabled.
#CFGFLAGS += -DSCACHE_CRC_CHECK

# Use software byte-swap when primary internal iProc CPU is run
# in big-endian mode. Intended for use with little-endian iProc firmware
# images when the primary internal iProc CPU is run in big-endian mode.
# In this case we cannot use hardware byte-swap, because it affects both
# the primary internal CPU (big endian) and the firmware CPU (little endian).
#CFGFLAGS += -DCMIC_SOFT_BYTE_SWAP

################################################################
#
# Enable Easy Reload Support
#
################################################################
#CFGFLAGS += -DBCM_EASY_RELOAD_SUPPORT
# For validation purposes
#CFGFLAGS += -DBCM_EASY_RELOAD_SUPPORT_SW_DUMP

# Software Trunk failover Support
#
#CFGFLAGS += -DBCM_TRUNK_FAILOVER_SUPPORT

################################################################
#
# Override default VXWORKS thread options to make set 
# VX_UNBREAKABLE flag in task creation.
#
################################################################
#CFGFLAGS += -DVX_THREAD_OPT_UNBREAKABLE


################################################################
#
# Use default priority for BDE interrupt thread.
#
################################################################
#CFGFLAGS += -DSAL_BDE_THREAD_PRIO_DEFAULT

################################################################
#
# Use cached DMA memory when mapping kernel DMA memory to user
# mode. Should only be enabled on cache-coherent platforms.
#
################################################################
#CFGFLAGS += -DSAL_BDE_USE_CACHED_DMA_MEM

################################################################
#
# Take the spl lock upon entering an ISR
#
################################################################
#CFGFLAGS += -DSAL_SPL_LOCK_ON_IRQ

################################################################
#
# Silently ignore NULL pointer free in sal_free API
# Default behaviour is to assert if a NULL pointer is passed to sal_free
#
################################################################
#CFGFLAGS += -DSAL_FREE_NULL_IGNORE

################################################################
# For historical reasons the PCI probe function skips device 12
# by default to prevent a system hang on certain platforms.
# Set this value to zero to probe all PCI devices.
################################################################
#CFGFLAGS += -DOVERRIDE_PCI_SKIP_DEV_MASK=0

################################################################
# Override max devices supported by PLI BDE
################################################################
#CFGFLAGS += -DPLI_MAX_DEVICES

################################################################
# Track BCM API calls to avoid deinitialization while calls active
# This will incur a small time penalty for each BCM API call
################################################################
#CFGFLAGS += -DBCM_CONTROL_API_TRACKING

################################################################
# Override default retry time for detach to wait for executing
# APIs to complete.
################################################################
#CFGFLAGS += -DBCM_DETACH_POLL_INTERVAL_USECS_DEFAULT=100000
#CFGFLAGS += -DBCM_DETACH_NUM_RETRIES_DEFAULT=3000

################################################################
# Disable the RX module initialization
################################################################
#CFGFLAGS += -DBCM_RX_DISABLE

################################################################
# Enable TX callback in interrupt thread
################################################################
#CFGFLAGS += -DTX_CB_INTR

################################################################
# When sal_sem_take wait for semaphore, system will use 
# monotonic time instead of real time to computer how long 
# one thread has been waiting. 
################################################################
#CFGFLAGS += BCM_MONOTONIC_TIME

################################################################
# Enable multiple SDK-based applications to run on top of a 
# single BDE (see $SDK/doc/multi-instance.txt for more 
# information).
################################################################
#CFGFLAGS += -DBCM_INSTANCE_SUPPORT

################################################################
#
# Disable SW dumps routines from compilation.
# SW dumps are enabled by default in SDK.
#
################################################################
#CFGFLAGS += -DBCM_SW_STATE_DUMP_DISABLE

#---------------------------------------------------------------
# $Id: Makefile.linux-iproc Exp $
# $Copyright: 2007-2023 Broadcom Inc. All rights reserved.
# 
# Permission is granted to use, copy, modify and/or distribute this
# software under either one of the licenses below.
# 
# License Option 1: GPL
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License, version 2, as
# published by the Free Software Foundation (the "GPL").
# 
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License version 2 (GPLv2) for more details.
# 
# You should have received a copy of the GNU General Public License
# version 2 (GPLv2) along with this source code.
# 
# 
# License Option 2: Broadcom Open Network Switch APIs (OpenNSA) license
# 
# This software is governed by the Broadcom Open Network Switch APIs license:
# https://www.broadcom.com/products/ethernet-connectivity/software/opennsa $
# 
# Makefile for iproc-CMICd

# User must select one platform from below.By default ARM_LINUX is selected. .
ifeq (,$(BUILD_PLATFORM))
BUILD_PLATFORM=ARM_LINUX
endif

CROSS_COMPILE:= aarch64-linux-gnu-

CROSS_GCC_VER ?= $(shell $(CROSS_COMPILE)gcc -dumpversion)

# Default Linux include directory
ifeq (,$(LINUX_INCLUDE))
LINUX_INCLUDE := $(KERNDIR)/include
endif

CFLAGS += -DPTRS_ARE_64BITS -DLONGS_ARE_64BITS
CFLAGS += -DPHYS_ADDRS_ARE_64BITS
CFLAGS += -fno-aggressive-loop-optimizations -fno-strict-overflow
CFLAGS += -Wno-error=maybe-uninitialized
CFLAGS += -Wno-error=unused-function
CFLAGS += -Wno-error=array-bounds
CFLAGS += -Wno-error=format-overflow
ifeq "$(shell expr `echo $(CROSS_GCC_VER) | cut -f1 -d.` \>= 8)" "1"
    CFLAGS += -Wno-stringop-overflow
    CFLAGS += -Wno-stringop-truncation
    CFLAGS += -Wno-error=restrict
endif
ifeq "$(shell expr `echo $(CROSS_GCC_VER) | cut -f1 -d.` \>= 9)" "1"
	CFLAGS += -Wno-address-of-packed-member
endif
ifeq "$(shell expr `echo $(CROSS_GCC_VER) | cut -f1 -d.` \== 10)" "1"
	CFLAGS += -Wno-error=uninitialized
	CFLAGS += -Wno-error=format-overflow
	CFLAGS += -fcommon
endif
ifeq "$(shell expr `echo $(CROSS_GCC_VER) | cut -f1 -d.` \== 12)" "1"
	CFLAGS += -flarge-source-files
	CFLAGS += -Wno-error=address
endif

CFGFLAGS += -DSAL_BDE_DMA_MEM_DEFAULT=16

ARCH = arm64
KBUILD_VERBOSE = 1
ENDIAN = LE_HOST=1

export ARCH KBUILD_VERBOSE

comma = ,
basetarget = $(basename $(notdir $@))
modname = $(basetarget)

# Extra variables.
EXTRA_CFLAGS = -D"KBUILD_STR(s)=\#s" $(basename_flags) $(modname_flags)

name-fix = $(subst $(comma),_,$(subst -,_,$1))
basename_flags = -D"KBUILD_BASENAME=KBUILD_STR($(call name-fix,$(basetarget)))"
modname_flags  = $(if $(filter 1,$(words $(modname))),\
                 -D"KBUILD_MODNAME=KBUILD_STR($(call name-fix,$(modname)))")

export VERBOSE=1
export V=1

ifeq (,$(KFLAGS))
KFLAGS := -D__LINUX_ARM_ARCH__=8 -D__KERNEL__ -DPTRS_ARE_64BITS -DLONGS_ARE_64BITS -nostdinc -I$(LINUX_INCLUDE) -I$(KERNDIR)/include -include $(KERNDIR)/include/generated/autoconf.h -I$(LINUX_INCLUDE)/../arch/arm64/include -I$(KERNDIR)/arch/arm64/include -I$(KERNDIR)/arch/arm64/include/generated -I$(KERNDIR)/arch/arm64/include/generated/uapi -I$(KERNDIR)/arch/arm64/include/generated/asm -I$(LINUX_INCLUDE)/uapi -I$(KERNDIR)/include/generated/uapi -I$(LINUX_INCLUDE)/../arch/arm64/include/uapi -I$(KERNDIR)/arch/arm64/include/uapi  -Wall -Wstrict-prototypes -Wno-trigraphs -O2 -fno-strict-aliasing -fno-common -fno-pic -pipe -ffreestanding -fomit-frame-pointer -g -fno-stack-protector -Wdeclaration-after-statement -Wno-pointer-sign -mcmodel=large
# this is needed only for older dep logic, otherwise we can just skip ccflags overriding in Makefile.linux-kmodule and use the neat logic in linux-headers-arm64.deb silently.
endif

ifneq ($(targetplat),user)
include ${SDK}/make/Makefile.linux-kernel-4_4
endif
