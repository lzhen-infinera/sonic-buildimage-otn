#  Copyright (C) Infinera Corperation

# override default behaviour

echo "Preparing for installation ... "

# for now we don't support installing on sonic yet.
# if [ "$install_env" = "onie" ]; then
#    MACH_FILE="/etc/machine.conf"
#else
#    MACH_FILE="/host/machine.conf"
#fi

# Skip VID Header in UBIFS
#LINUX_MISC_CMD='apparmor=1 security=apparmor usbcore.autosuspend=-1'

# machine profiles
#FW_ENV="/dev/mtd2 0x0 0x20000 0x20000 1"
HD_DESC="1:main:-1:ext4"
fit_fname="/boot/sonic_arm64.fit"
sonic_loadaddr=0xa0000000
sonic_platform=infn-frcug3x
# ^ TODO: decide machine name later
demo_mnt=/mnt/main
demo_dev=/dev/sda1

# partition framework
HD=/dev/sda

loop_thru()
{
    for i in $HD_DESC; do
        ID=$(echo $i|cut -d':' -f 1)
        NAME=$(echo $i|cut -d':' -f 2)
        SZ=$(echo $i|cut -d':' -f 3)
        TYPE=$(echo $i|cut -d':' -f 4)
        $1 $ID $NAME $SZ $TYPE || return 1
    done
}

check_part()
{
    RES=$(parted -s $HD unit MiB print|awk -v id=$1 -v name=$2 -v sz=$3 '$1==id && ($6==name || $5==name) {if (sz < 0) {print 1; exit 0} sub(/MiB/,"",$4); a=sz-$4; if ( a>=0 && a<1.0 || a<0 && a>-1.0 ) print 1; exit 0}')
    [ -n "$RES" ] && return 0
    return 1
}

check_parts_avail()
{
    loop_thru check_part || return 1
    return 0
}

mount_by_name()
{
    NUM=$(parted -s $HD unit MiB print|awk -v name=$1 '$6==name || $5==name {print $1; exit 0}')
    if [ -z "$NUM" ]; then
        return 1
    fi
    if grep "${HD}${NUM} $2" /proc/mounts; then
        return 0
    fi
    grep "${HD}${NUM}" /proc/mounts && umount ${HD}${NUM}
    grep "$2" /proc/mounts && umount $2
    mkdir -p $2
    mount -o noatime ${HD}${NUM} $2
}

mounted_by_name()
{
    NUM=$(parted -s $HD unit MiB print|awk -v name=$1 '$6==name || $5==name {print $1; exit 0}')
    if [ -z "$NUM" ]; then
        return 1
    fi
    if grep "${HD}${NUM} $2" /proc/mounts; then
        return 0
    fi
    return 1
}

create_part()
{
    if [[ $3 -lt 0 ]]; then
        SCRIPT="$SCRIPT mkpart primary $4 $START $3 name $1 $2"
    else
        SCRIPT="$SCRIPT mkpart primary $4 $START $((START+$3)) name $1 $2"
        START=$((START+$3))
    fi
}

create_part_fs()
{
    if [ -n "$4" ]; then
        grep "${HD}${1}" /proc/mounts && umount ${HD}${1}
        mkfs.$4 -F -L $2 ${HD}${1}
    fi
}

create_parts()
{
    for i in $(ls ${HD}?*); do
        grep "$i" /proc/mounts && umount $i
    done
    START=1
    SCRIPT="mklabel gpt unit MiB"
    loop_thru create_part || return 1
    parted --script $HD -- $SCRIPT
    partprobe $HD
    loop_thru create_part_fs || return 1
}


# sonic interfaces

#  Input vars:  image_dir  --- only set up when calling the interface functions, not when sourcing the platform.conf file.
#               FILESYSTEM_SQUASHFS
#  Output vars: demo_mnt
#               demo_dev --- not really needed by the outside logic
#               demo_part_size --- looks not used

create_partition() {
    partprobe $HD
    if check_parts_avail; then
        echo "partitions match requirement, re-formating if necessary..."
        loop_thru create_part_fs
    else
        echo "partitions not avaliable, repartitioning..."
        create_parts
    fi
}

mount_partition() {
    mount_by_name main ${demo_mnt}
}

prepare_boot_menu() {
    echo "Sync up cache ..."
    sync
    echo "Setting up U-Boot environment..."

    NOS_BOOTCOMMAND="setenv bootargs console=\$consoledev,\$baudrate net.ifnames=0 loopfstype=squashfs loop=$image_dir/$FILESYSTEM_SQUASHFS systemd.unified_cgroup_hierarchy=0 varlog_size=512 root=$demo_dev rw sonic_platform=$sonic_platform quiet; scsi scan; ext2load scsi 0:1 $sonic_loadaddr ${image_dir}${fit_fname}; bootm $sonic_loadaddr#$sonic_platform"

fw_setenv -f -s - <<EOF
    nos_bootcmd $NOS_BOOTCOMMAND
EOF

    echo "Installed SONiC base image SONiC-OS successfully"
}

bootloader_menu_config() {
    # Update uboot Environment
    prepare_boot_menu
}

if [ -f /debug.shinc ]; then
    source /debug.shinc
fi

